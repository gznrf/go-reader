package gateway_handler

import (
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
)

func (h *Handler) UploadBook(w http.ResponseWriter, r *http.Request) {
	log.Println("üì• –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ /upload")

	// –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
	filename := r.Header.Get("X-Filename")
	if filename == "" {
		http.Error(w, "‚ùå –ó–∞–≥–æ–ª–æ–≤–æ–∫ 'X-Filename' –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω", http.StatusBadRequest)
		log.Println("‚ùå –ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Filename")
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	homeDir, err := os.UserHomeDir()
	if err != nil {
		http.Error(w, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–æ–º–∞—à–Ω—é—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é", http.StatusInternalServerError)
		log.Printf("‚ùå os.UserHomeDir error: %v\n", err)
		return
	}

	// –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
	saveDir := filepath.Join(homeDir, "Desktop", "–∫–æ–¥", "goProjects", "go_reader", "files")
	err = os.MkdirAll(saveDir, os.ModePerm)
	if err != nil {
		http.Error(w, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É", http.StatusInternalServerError)
		log.Printf("‚ùå os.MkdirAll error: %v\n", err)
		return
	}

	// –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –¥–æ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
	savePath := filepath.Join(saveDir, filepath.Base(filename))

	// –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
	dst, err := os.Create(savePath)
	if err != nil {
		http.Error(w, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª", http.StatusInternalServerError)
		log.Printf("‚ùå os.Create error: %v\n", err)
		return
	}
	defer dst.Close()

	// –ö–æ–ø–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–∞–π–ª
	written, err := io.Copy(dst, r.Body)
	if err != nil {
		http.Error(w, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞", http.StatusInternalServerError)
		log.Printf("‚ùå io.Copy error: %v\n", err)
		return
	}

	log.Printf("‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω (%d –±–∞–π—Ç) –≤ %s\n", written, savePath)
	w.WriteHeader(http.StatusOK)
	fmt.Fprintf(w, "‚úÖ –§–∞–π–ª '%s' —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!\n", filename)
}

func (h *Handler) GetAllBooks(w http.ResponseWriter, r *http.Request) {

}

func (h *Handler) GetBookById(w http.ResponseWriter, r *http.Request) {

}
func (h *Handler) DeleteBookById(w http.ResponseWriter, r *http.Request) {

}
